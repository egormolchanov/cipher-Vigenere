
let language = 'EN';

const tableRu = {
  horizontally: "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ".toLowerCase(),
  vertical: [
    ['а','б','в','г','д','е','ё','ж','з','и','й','к','л','м','н','о','п','р','с','т','у','ф','х','ц','ч','ш','щ','ъ','ы','ь','э','ю','я'],
    ['б','в','г','д','е','ё','ж','з','и','й','к','л','м','н','о','п','р','с','т','у','ф','х','ц','ч','ш','щ','ъ','ы','ь','э','ю','я','а'],
    ['в','г','д','е','ё','ж','з','и','й','к','л','м','н','о','п','р','с','т','у','ф','х','ц','ч','ш','щ','ъ','ы','ь','э','ю','я','а','б'],
    ['г','д','е','ё','ж','з','и','й','к','л','м','н','о','п','р','с','т','у','ф','х','ц','ч','ш','щ','ъ','ы','ь','э','ю','я','а','б','в'],
    ['д','е','ё','ж','з','и','й','к','л','м','н','о','п','р','с','т','у','ф','х','ц','ч','ш','щ','ъ','ы','ь','э','ю','я','а','б','в','г'],
    ['е','ё','ж','з','и','й','к','л','м','н','о','п','р','с','т','у','ф','х','ц','ч','ш','щ','ъ','ы','ь','э','ю','я','а','б','в','г','д'],
    ['ё','ж','з','и','й','к','л','м','н','о','п','р','с','т','у','ф','х','ц','ч','ш','щ','ъ','ы','ь','э','ю','я','а','б','в','г','д','е'],
    ['ж','з','и','й','к','л','м','н','о','п','р','с','т','у','ф','х','ц','ч','ш','щ','ъ','ы','ь','э','ю','я','а','б','в','г','д','е','ё'],
    ['з','и','й','к','л','м','н','о','п','р','с','т','у','ф','х','ц','ч','ш','щ','ъ','ы','ь','э','ю','я','а','б','в','г','д','е','ё','ж'],
    ['и','й','к','л','м','н','о','п','р','с','т','у','ф','х','ц','ч','ш','щ','ъ','ы','ь','э','ю','я','а','б','в','г','д','е','ё','ж','з'],
    ['й','к','л','м','н','о','п','р','с','т','у','ф','х','ц','ч','ш','щ','ъ','ы','ь','э','ю','я','а','б','в','г','д','е','ё','ж','з','и'],
    ['к','л','м','н','о','п','р','с','т','у','ф','х','ц','ч','ш','щ','ъ','ы','ь','э','ю','я','а','б','в','г','д','е','ё','ж','з','и','й'],
    ['л','м','н','о','п','р','с','т','у','ф','х','ц','ч','ш','щ','ъ','ы','ь','э','ю','я','а','б','в','г','д','е','ё','ж','з','и','й','к'],
    ['м','н','о','п','р','с','т','у','ф','х','ц','ч','ш','щ','ъ','ы','ь','э','ю','я','а','б','в','г','д','е','ё','ж','з','и','й','к','л'],
    ['н','о','п','р','с','т','у','ф','х','ц','ч','ш','щ','ъ','ы','ь','э','ю','я','а','б','в','г','д','е','ё','ж','з','и','й','к','л','м'],
    ['о','п','р','с','т','у','ф','х','ц','ч','ш','щ','ъ','ы','ь','э','ю','я','а','б','в','г','д','е','ё','ж','з','и','й','к','л','м','н'],
    ['п','р','с','т','у','ф','х','ц','ч','ш','щ','ъ','ы','ь','э','ю','я','а','б','в','г','д','е','ё','ж','з','и','й','к','л','м','н','о'],
    ['р','с','т','у','ф','х','ц','ч','ш','щ','ъ','ы','ь','э','ю','я','а','б','в','г','д','е','ё','ж','з','и','й','к','л','м','н','о','п'],
    ['с','т','у','ф','х','ц','ч','ш','щ','ъ','ы','ь','э','ю','я','а','б','в','г','д','е','ё','ж','з','и','й','к','л','м','н','о','п','р'],
    ['т','у','ф','х','ц','ч','ш','щ','ъ','ы','ь','э','ю','я','а','б','в','г','д','е','ё','ж','з','и','й','к','л','м','н','о','п','р','с'],
    ['у','ф','х','ц','ч','ш','щ','ъ','ы','ь','э','ю','я','а','б','в','г','д','е','ё','ж','з','и','й','к','л','м','н','о','п','р','с','т'],
    ['ф','х','ц','ч','ш','щ','ъ','ы','ь','э','ю','я','а','б','в','г','д','е','ё','ж','з','и','й','к','л','м','н','о','п','р','с','т','у'],
    ['х','ц','ч','ш','щ','ъ','ы','ь','э','ю','я','а','б','в','г','д','е','ё','ж','з','и','й','к','л','м','н','о','п','р','с','т','у','ф'],
    ['ц','ч','ш','щ','ъ','ы','ь','э','ю','я','а','б','в','г','д','е','ё','ж','з','и','й','к','л','м','н','о','п','р','с','т','у','ф','х'],
    ['ч','ш','щ','ъ','ы','ь','э','ю','я','а','б','в','г','д','е','ё','ж','з','и','й','к','л','м','н','о','п','р','с','т','у','ф','х','ц'],
    ['ш','щ','ъ','ы','ь','э','ю','я','а','б','в','г','д','е','ё','ж','з','и','й','к','л','м','н','о','п','р','с','т','у','ф','х','ц','ч'],
    ['щ','ъ','ы','ь','э','ю','я','а','б','в','г','д','е','ё','ж','з','и','й','к','л','м','н','о','п','р','с','т','у','ф','х','ц','ч','ш'],
    ['ъ','ы','ь','э','ю','я','а','б','в','г','д','е','ё','ж','з','и','й','к','л','м','н','о','п','р','с','т','у','ф','х','ц','ч','ш','щ'],
    ['ы','ь','э','ю','я','а','б','в','г','д','е','ё','ж','з','и','й','к','л','м','н','о','п','р','с','т','у','ф','х','ц','ч','ш','щ','ъ'],
    ['ь','э','ю','я','а','б','в','г','д','е','ё','ж','з','и','й','к','л','м','н','о','п','р','с','т','у','ф','х','ц','ч','ш','щ','ъ','ы'],
    ['э','ю','я','а','б','в','г','д','е','ё','ж','з','и','й','к','л','м','н','о','п','р','с','т','у','ф','х','ц','ч','ш','щ','ъ','ы','ь'],
    ['ю','я','а','б','в','г','д','е','ё','ж','з','и','й','к','л','м','н','о','п','р','с','т','у','ф','х','ц','ч','ш','щ','ъ','ы','ь','э'],
    ['я','а','б','в','г','д','е','ё','ж','з','и','й','к','л','м','н','о','п','р','с','т','у','ф','х','ц','ч','ш','щ','ъ','ы','ь','э','ю']
  ]
}

const tableEn = {
  horizontally: "ABCDEFGHIJKLMNOPQRSTUVWXYZ".toLowerCase(),
  vertical: [
    ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'],
    ['b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','a'],
    ['c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','a','b'],
    ['d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','a','b','c'],
    ['e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','a','b','c','d'],
    ['f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','a','b','c','d','e'],
    ['g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','a','b','c','d','e','f'],
    ['h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','a','b','c','d','e','f','g'],
    ['i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','a','b','c','d','e','f','g','h'],
    ['j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','a','b','c','d','e','f','g','h','i'],
    ['k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','a','b','c','d','e','f','g','h','i','j'],
    ['l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','a','b','c','d','e','f','g','h','i','j','k'],
    ['m','n','o','p','q','r','s','t','u','v','w','x','y','z','a','b','c','d','e','f','g','h','i','j','k','l'],
    ['n','o','p','q','r','s','t','u','v','w','x','y','z','a','b','c','d','e','f','g','h','i','j','k','l','m'],
    ['o','p','q','r','s','t','u','v','w','x','y','z','a','b','c','d','e','f','g','h','i','j','k','l','m','n'],
    ['p','q','r','s','t','u','v','w','x','y','z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o'],
    ['q','r','s','t','u','v','w','x','y','z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p'],
    ['r','s','t','u','v','w','x','y','z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q'],
    ['s','t','u','v','w','x','y','z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r'],
    ['t','u','v','w','x','y','z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s'],
    ['u','v','w','x','y','z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t'],
    ['v','w','x','y','z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u'],
    ['w','x','y','z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v'],
    ['x','y','z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w'],
    ['y','z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x'],
    ['z','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y']
  ]
}

let cipherWord = '';

//cipher and decipher
const vizhenerCipher = (event, message, table) => {
  writeKeyWord();
  const itsValue = message.value;

  let newString = '',
      indexLetter = '',
      index = 0,
      indexLetterWord = [];

  //find the index of the letters, the secret word
  if (cipherWord != '') {
    cipherWord.split('').forEach(el => {
      indexLetterWord.push(table.horizontally.search(el.toLowerCase()));
    });
  } else {
    return false;
  }

  switch (event.target.id) {
    case 'bntСipher':
      //we calculate according to the table the new value of the letter
      itsValue.split('').forEach(el => {
        indexLetter = table.horizontally.search(el.toLowerCase());

        if (index == indexLetterWord.length) index = 0
        newString += table.vertical[indexLetter][indexLetterWord[index]];
        index++;

      });
      break;
    case 'bntTranscript':
      //we calculate according to the table the new value of the letter
      itsValue.split('').forEach(el => {
        indexLetter = table.horizontally.search(el.toLowerCase());

        if (index == indexLetterWord.length) index = 0

        table.vertical.forEach((elem, ind) => {

          if (elem[indexLetterWord[index]] == el) {
            newString += table.horizontally[ind];
          }
        }) 
        index++;

    });
      break;
  } 

  output.innerHTML = newString;
}

bntСipher.addEventListener("click", () => {

  switch (language) {
    case 'RU':
      vizhenerCipher(event, cipher, tableRu);
      break;
    case 'EN':
      vizhenerCipher(event, cipher, tableEn);
      break;
  }
});

bntTranscript.addEventListener("click", () => {
  switch (language) {
    case 'RU':
      vizhenerCipher(event, transcript, tableRu);
      break;
    case 'EN':
      vizhenerCipher(event, transcript, tableEn);
      break;
  }
});

//==============================================================================

//learn keyword
const writeKeyWord = () => {
  cipherWord = keyWord.value;
}
writeKeyWord();


//input check
const checkInput = (message) => {

  let itsValue = '';

  switch (language) {
    case 'RU':
      itsValue = message.value.replace(/[^а-яА-Яё]/g, '');
      break;
    case 'EN':
      itsValue = message.value.replace(/[^a-zA-Z]/g, '');
      break;
  }
  
  message.value = itsValue;
}

cipher.addEventListener("input", () => {
  checkInput(cipher);
});

transcript.addEventListener("input", () => {
  checkInput(transcript);
});

keyWord.addEventListener("input", () => {
  checkInput(keyWord);
});


//====================================================================================

//language switch

english.addEventListener('click', () => {
  language = 'EN';
  document.querySelectorAll('input[name="entryField"]').forEach(el => {
    el.value = '';
  });

  output.innerHTML = '';

  keyWord.value = 'sky';
  writeKeyWord();

  russian.classList.remove('language__bnt--active');
  english.classList.add('language__bnt--active');

  sampleText.innerHTML = 'Everyday practice shows that the implementation of the planned targets to a large extent determines the creation of a development model. Ideological considerations of a higher order, as well as the further development of various forms of activity, make it possible to assess the value of new proposals. Ideological considerations of a higher order, as well as the framework and place of personnel training, provide a wide range of (specialists) participation in the formation of new proposals.';
})

russian.addEventListener('click', () => {
  language = 'RU';
  document.querySelectorAll('input[name="entryField"]').forEach(el => {
    el.value = '';
  });

  output.innerHTML = '';

  keyWord.value = 'небо';
  writeKeyWord();

  russian.classList.add('language__bnt--active');
  english.classList.remove('language__bnt--active');

  sampleText.innerHTML = 'Повседневная практика показывает, что реализация намеченных плановых заданий в значительной степени обуславливает создание модели развития. Идейные соображения высшего порядка, а также дальнейшее развитие различных форм деятельности позволяет оценить значение новых предложений. Идейные соображения высшего порядка, а также рамки и место обучения кадров обеспечивает широкому кругу (специалистов) участие в формировании новых предложений.';
})